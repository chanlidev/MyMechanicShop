@page "/ordermanagement"
@using MyMechanicShop.Data
@using MySqlConnector
@inject MySqlConnection MySqlConnection
@inject MySqlOrderRepository Order


<!-- Page Header -->
<h3>Order Management</h3>

<!-- Search Bar -->
<div style="display: flex; justify-content: space-between; align-items: center;">
    <div>
        <input @bind="searchQuery" style="width: 920px;" placeholder="Search By Order ID Or Item Name" />
        <button style="background-color: blue; color: white; width: 150px; margin-top: 20px; margin-bottom: 40px;" @onclick="Search">Search</button>
    </div>
</div>

<!-- Display Orders -->
@if (orders != null)
{
    @if (filteredOrders.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Order Date</th>
                    <th>Ship Date</th>
                    <th>Order Total</th>
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Order Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in filteredOrders)
                {
                    <tr>
                        <td>@order.orderId</td>
                        <td>@order.orderDate.ToString("yyyy-MM-dd")</td>
                        <td>
                            @if (order.shipDate.HasValue)
                            {
                                @order.shipDate.Value.ToString("yyyy-MM-dd")
                            }
                            else
                            {
                                <span></span>
                            }
                        </td>
                        <td>@string.Format("{0:C}", order.orderTotal)</td>
                        <td>@order.itemName</td>
                        <td>@order.quantity</td>
                        <td>
                            <select @bind="order.orderStatus">
                                <option value="Shipped">Shipped</option>
                                <option value="Canceled">Canceled</option>
                                <option value="Not Yet Shipped">Not Yet Shipped</option>
                            </select>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div style="display: flex; justify-content: center; align-items: center; margin-top: 20px;">
            <button style="background-color: blue; color: white; width: 150px;" @onclick="SaveChanges">Save</button>
        </div>

        <!-- Show success message after save -->
        @if (showSuccessMessage)
        {
            <p style="color: green; text-align: center; margin-top: 10px;">Successfully Updated!</p>
        }
    }
    else
    {
        <p>No orders found.</p>
    }
}
else
{
    <p>Loading...</p>
}


@code 
{
    private List<Order> orders;
    private List<Order> filteredOrders;
    private string searchQuery = "";
    private bool showSuccessMessage = false;

    // Load orders on page initialization
    private async Task LoadOrders()
    {
        using (var connection = MySqlConnection)
        {
            var repository = new MySqlOrderRepository(connection);
            orders = await repository.GetAllOrdersAsync();
            filteredOrders = new List<Order>(orders);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    // Search orders based on query
    private void Search()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredOrders = new List<Order>(orders);
        }
        else
        {
            filteredOrders = orders.Where(o =>
                o.orderId.ToString().Contains(searchQuery) ||
                o.itemName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    // Clear search and reset filtered orders
    private void ClearSearch()
    {
        searchQuery = "";
        filteredOrders = new List<Order>(orders);
    }

    // Save changes to order statuses
    private async Task SaveChanges()
    {
        using (var connection = MySqlConnection)
        {
            foreach (var order in filteredOrders)
            {
                if (order.orderStatus != order.OriginalOrderStatus) // Check if status changed
                {
                    if (!IsValidOrderStatus(order.orderStatus))
                    {
                        throw new InvalidOperationException("Invalid order status.");
                    }

                    await Order.UpdateOrderStatusAsync(order.orderId, order.orderStatus);
                    order.OriginalOrderStatus = order.orderStatus; // Update the original status
                }
            }

            // Refresh the order list to reflect the updated statuses
            orders = await Order.GetAllOrdersAsync();

            // Update the filtered orders list based on the refreshed orders list
            filteredOrders = new List<Order>(orders);

            // Show success message
            showSuccessMessage = true;
        }
    }

    // Check if an order status is valid
    private bool IsValidOrderStatus(string status)
    {
        return status == "Shipped" || status == "Canceled" || status == "Not Yet Shipped";
    }

}
