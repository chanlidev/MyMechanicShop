@page "/productcatalog"
@using MyMechanicShop.Data
@using MySqlConnector
@inject MySqlConnection MySqlConnection
@inject MySqlProductRepository Product

<h3>Product Catalog</h3>

<div style="display: flex; justify-content: space-between; align-items: center;">
    <div>
        <input @bind="searchQuery" style="width: 920px;" placeholder="Search by Item Name" />
        <button style="background-color: blue; color: white; width: 150px; margin-top: 20px; margin-bottom: 40px;" @onclick="Search">Search</button>
    </div>
</div>

@if (products != null)
{
    @if (filteredProducts.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Image</th>
                    <th>Item Name</th>
                    <th>Price</th>
                    <th>Inventory</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in filteredProducts)
                {
                    <tr>
                        <td>@product.id</td>
                        <td><img src="@product.imageURL" alt="Product Image" style="max-width: 50px; max-height: 50px;" /></td>
                        <td>@product.itemName</td>
                        <td>@string.Format("{0:C}", product.price)</td>
                        <td>
                            <input type="number" @bind="@product.inventory" style="width: 50px;" />
                        </td>
                        <td style="color: @GetStatusColor(product.status)">@product.status</td>
                    </tr>
                }
            </tbody>
        </table>
        <div style="display: flex; justify-content: center; align-items: center; margin-top: 20px;">
            <button style="background-color: blue; color: white; width: 150px;" @onclick="SaveChanges">Save</button>
        </div>
        @if (showSuccessMessage)
        {
            <p style="color: green; text-align: center; margin-top: 10px;">Successfully Updated!</p>
        }
        @if (showErrorMessage)
        {
            <p style="color: red; text-align: center; margin-top: 10px;">@errorMessage</p>
        }
    }
    else
    {
        <p>No products found.</p>
    }
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Product> products;
    private List<Product> filteredProducts;
    private string searchQuery = "";
    private bool showSuccessMessage = false;
    private bool showErrorMessage = false;
    private string errorMessage = "";

    private string GetStatusColor(string status)
    {
        switch (status)
        {
            case "In Stock":
                return "green";
            case "Out Of Stock":
                return "red";
            case "Low Inventory":
                return "orange";
            default:
                return "black";
        }
    }

    private async Task LoadProducts()
    {
        using (var connection = MySqlConnection)
        {
            var repository = new MySqlProductRepository(connection);
            products = await repository.GetAllProductsAsync();
            filteredProducts = new List<Product>(products);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private void Search()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredProducts = new List<Product>(products);
        }
        else
        {
            filteredProducts = products.Where(p =>
                p.id.ToString().Contains(searchQuery) ||
                p.itemName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchQuery = "";
        filteredProducts = new List<Product>(products);
    }

    private async Task SaveChanges()
    {
        using (var connection = MySqlConnection)
        {
            try
            {
                foreach (var product in filteredProducts)
                {
                    if (product.inventory != product.OriginalInventory) // Check if inventory changed
                    {
                        if (product.inventory < 0)
                        {
                            throw new InvalidOperationException("Inventory cannot be negative.");
                        }

                        await Product.UpdateProductInventoryAsync(product.id, product.inventory);

                        if (product.inventory == 0)
                        {
                            product.status = "Out Of Stock";
                        }
                        else if (product.inventory < 10)
                        {
                            product.status = "Low Inventory";
                        }
                        else
                        {
                            product.status = "In Stock";
                        }
                        await Product.UpdateProductStatusAsync(product.id, product.status);

                        product.OriginalInventory = product.inventory; // Update the original inventory
                    }
                }

                // Refresh the order list to reflect the updated statuses
                products = await Product.GetAllProductsAsync();

                // Update the filtered orders list based on the refreshed orders list
                filteredProducts = new List<Product>(products);

                // Show success message
                showSuccessMessage = true;
            }
            catch (InvalidOperationException ex)
            {
                // Handle the exception
                showErrorMessage = true;
                errorMessage = ex.Message;
            }
        }
    }
}
